import base64
from PIL import Image
from io import BytesIO

# Base64 encoded image string
base64_string = "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"

# Decode the base64 string into bytes
image_bytes = base64.b64decode(base64_string)

# Open the image from bytes using Pillow
image = Image.open(BytesIO(image_bytes))

# Get the size of the image
image_size = image.size

# Show the image using Pillow
image.show()

# Print the size of the image
print(f"Image size: {image_size[0]}x{image_size[1]}")
