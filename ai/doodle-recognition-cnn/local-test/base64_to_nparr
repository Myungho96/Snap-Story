import base64
import numpy as np
from io import BytesIO
from PIL import Image

# assume `base64_image` is the base64 encoded string of the image
base64_image = "" 

# decode base64 encoded string to bytes
image_bytes = base64.b64decode(base64_image)

# convert bytes to PIL Image object
pil_image = Image.open(BytesIO(image_bytes))

# convert PIL Image object to numpy array
np_array = np.array(pil_image)

# find unique values in the array
unique_values = np.unique(np_array)

# print the unique values
print(unique_values)